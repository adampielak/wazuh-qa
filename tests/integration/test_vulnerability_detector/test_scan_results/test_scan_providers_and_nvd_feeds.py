# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest
import json
from time import sleep

from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.file import truncate_file
from wazuh_testing.vulnerability_detector import make_vuln_callback, insert_package, clean_table, \
                                                 insert_vulnerability, modify_system, clean_vd_tables, \
                                                 CUSTOM_NVD_VULNERABILITIES_1, CUSTOM_NVD_VULNERABILITIES_2, \
                                                 CUSTOM_NVD_FEED
from wazuh_testing.tools.services import control_service

# Marks
pytestmark = pytest.mark.tier(level=1)


# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_provider_and_nvd_configuration.yaml')
nvd_vulnerabilities_data_path = os.path.join(test_data_path, CUSTOM_NVD_VULNERABILITIES_1)
provider_vulnerabilities_data_path = os.path.join(test_data_path, CUSTOM_NVD_VULNERABILITIES_2)


wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
SCAN_TIMEOUT = 40


# Set configuration
parameters = [{'NVD_JSON_PATH': os.path.join(test_data_path, CUSTOM_NVD_FEED)}]
metadata = [{'nvd_json_path': os.path.join(test_data_path, CUSTOM_NVD_FEED)}]
ids = ['scan_nvd_configuration']


# Read JSON data templates
with open(nvd_vulnerabilities_data_path, 'r') as f:
    nvd_vulnerabilities = json.loads(f.read())

with open(provider_vulnerabilities_data_path, 'r') as f:
    provider_vulnerabilities = json.loads(f.read())

system_data = [
    { "target": "RHEL8", "os_name": "CentOS Linux", "os_major": "8", "os_minor": "1", "name": "centos8",
        "format": "rpm", "vulnerabilities_number": len(nvd_vulnerabilities['provider_vulnerabilities'])},
    { "target": "RHEL7", "os_name": "CentOS Linux", "os_major": "7", "os_minor": "8", "name": "centos7",
        "format": "rpm", "vulnerabilities_number": len(nvd_vulnerabilities['provider_vulnerabilities'])},
    { "target": "RHEL6", "os_name": "CentOS Linux", "os_major": "6", "os_minor": "10", "name": "centos6",
        "format": "rpm", "vulnerabilities_number": len(nvd_vulnerabilities['provider_vulnerabilities'])},
    { "target": "RHEL5", "os_name": "CentOS Linux", "os_major": "5", "os_minor": "11", "name": "centos5",
        "format": "rpm", "vulnerabilities_number": len(nvd_vulnerabilities['provider_vulnerabilities'])},
    { "target": "BIONIC", "os_name": "Ubuntu", "os_major": "18", "os_minor": "04", "name": "Ubuntu-bionic",
        "format": "deb", "vulnerabilities_number": len(nvd_vulnerabilities['nvd_vulnerabilities_data_path']) +
        len(nvd_vulnerabilities['provider_vulnerabilities'])},
    { "target": "XENIAL", "os_name": "Ubuntu", "os_major": "16", "os_minor": "04", "name": "Ubuntu-xenial",
        "format": "deb", "vulnerabilities_number": len(nvd_vulnerabilities['nvd_vulnerabilities_data_path']) +
        len(nvd_vulnerabilities['provider_vulnerabilities'])},
    { "target": "TRUSTY", "os_name": "Ubuntu", "os_major": "14", "os_minor": "04", "name": "Ubuntu-trusty",
        "format": "deb", "vulnerabilities_number": len(nvd_vulnerabilities['nvd_vulnerabilities_data_path']) +
        len(nvd_vulnerabilities['provider_vulnerabilities'])},
    { "target": "BUSTER", "os_name": "Debian GNU/Linux", "os_major": "10", "os_minor": "", "name": "debian10",
        "format": "deb", "vulnerabilities_number": len(nvd_vulnerabilities['nvd_vulnerabilities_data_path']) +
        len(nvd_vulnerabilities['provider_vulnerabilities'])},
    { "target": "STRETCH", "os_name": "Debian GNU/Linux", "os_major": "9", "os_minor": "", "name": "debian9",
        "format": "deb", "vulnerabilities_number": len(nvd_vulnerabilities['nvd_vulnerabilities_data_path']) +
        len(nvd_vulnerabilities['provider_vulnerabilities'])},
    { "target": "JESSIE", "os_name": "Debian GNU/Linux", "os_major": "8", "os_minor": "", "name": "debian8",
        "format": "deb", "vulnerabilities_number": len(nvd_vulnerabilities['nvd_vulnerabilities_data_path']) +
        len(nvd_vulnerabilities['provider_vulnerabilities'])},
    { "target": "WHEEZY", "os_name": "Debian GNU/Linux", "os_major": "7", "os_minor": "", "name": "debian7",
        "format": "deb", "vulnerabilities_number": len(nvd_vulnerabilities['nvd_vulnerabilities_data_path']) +
        len(nvd_vulnerabilities['provider_vulnerabilities'])},
]
system_data_ids = [system['target'] for system in system_data]


# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=system_data, ids=system_data_ids)
def mock_vulnerability_scan(request):
    """
    It allows to mock the vulnerability scan inserting custom packages, feeds and changing the host system
    """
    control_service('stop', daemon='wazuh-db')

    # Wait until modulesd is restarted to avoid overwriting the system
    sleep(5)

    # Clean tables
    clean_vd_tables(agent='000')

    # Mock system
    modify_system(os_name=request.param['os_name'], os_major=request.param['os_major'],
                  os_minor=request.param['os_minor'], name=request.param['name'])

    # Insert half vulnerabilities for provider feed
    for vulnerability in provider_vulnerabilities['vulnerabilities']:
        insert_vulnerability(**vulnerability['cve'], package=vulnerability['package']['name'],
                             target=request.param['target'])

    # Insert vulnerable packages
    for vulnerability in total_vulnerabilities:
        insert_package(**vulnerability['package'], source=vulnerability['package']['name'])

    control_service('start', daemon='wazuh-db')

    # Truncate ossec.log
    truncate_file(LOG_FILE_PATH)

    yield request.param

    control_service('stop', daemon='wazuh-db')

    # Clean tables
    clean_vd_tables(agent='000')

    sleep(1)

    control_service('start', daemon='wazuh-db')


def check_vulnerability_event(package, cve):
    """
    Check if inserted vulnerable packages are reported by vulnerability detector.

    Parameters
    ----------
    package: str
        Name of custom package to check. Example: 'firefox-0'
    cve : str
        Package CVE. Example: 'CVE-2019-11764'
    """
    wazuh_log_monitor.start(
        timeout=SCAN_TIMEOUT,
        update_position=False,
        callback=make_vuln_callback(f"The '{package}' package .* from agent .* is vulnerable to '{cve}'"),
        error_message=f"Could not find the report which says that the package {package} is vulnerable with {cve}",
    )


def test_vulnerabilities_report(get_configuration, configure_environment, restart_modulesd,
                                mock_vulnerability_scan):
    """
    Check if inserted vulnerable packages are reported by vulnerability detector
    """
    # Check the vulnerabilities of packages inserted
    for item in total_vulnerabilities:
        check_vulnerability_event(item['package']['name'], item['cve']['cveid'])

    # Check that the number of NVD vulnerabilities is the expected
    wazuh_log_monitor.start(
        timeout=SCAN_TIMEOUT,
        update_position=False,
        callback=make_vuln_callback(
            f"A total of '{provider_vulnerabilities_number}' vulnerabilities have been reported for agent '.*' " +
            "thanks to the 'vendor' feed."
        ),
        error_message=f"The expected number of vulnerabilities for vendor have not been found",
    )

    wazuh_log_monitor.start(
        timeout=SCAN_TIMEOUT,
        update_position=False,
        callback=make_vuln_callback(
            f"A total of '{nvd_vulnerabilities_number}' vulnerabilities have been reported for agent '.*' " +
            "thanks to the 'NVD' feed."
        ),
        error_message=f"The expected number of vulnerabilities for NVD have not been found",
    )
