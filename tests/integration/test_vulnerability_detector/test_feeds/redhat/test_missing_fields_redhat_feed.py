# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest
import json
import wazuh_testing.vulnerability_detector as vd

from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.file import truncate_file, read_json_file, write_json_file
from wazuh_testing.tools.services import control_service


# Marks
pytestmark = pytest.mark.tier(level=2)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', vd.INVALID_RHEL_FEEDS_CONF)
custom_redhat_oval_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_REDHAT_OVAL_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'REDHAT_JSON_PATH': custom_redhat_oval_feed_path}]
ids = ['REDHAT_configuration']

fields = ['CVE', 'severity', 'public_date', 'advisories', 'bugzilla', 'bugzilla_description', 'cvss_score',
          'cvss_scoring_vector', 'CWE', 'affected_packages', 'resource_url', 'cvss3_scoring_vector', 'cvss3_score']

field_ids = [f"missing: {field}" for field in fields]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=fields, ids=field_ids)
def remove_field_feed(request):
    """
    It allows to modify the feed by removing a certain field and loading the new feed configuration
    """
    backup_data = read_json_file(custom_redhat_oval_feed_path)

    data_removed_field = dict(backup_data[0])

    data_removed_field.pop(request.param, None)

    write_json_file(custom_redhat_oval_feed_path, [data_removed_field, backup_data[1]])

    vd.clean_vuln_and_sys_programs_tables()

    control_service('restart', daemon='wazuh-modulesd')

    vd.set_system(system='RHEL8')

    yield request.param

    write_json_file(custom_redhat_oval_feed_path, backup_data)

    vd.clean_vuln_and_sys_programs_tables()

    truncate_file(LOG_FILE_PATH)


def test_no_feed_changes(clean_vuln_tables, get_configuration, configure_environment, restart_modulesd):
    """Check if the feed is imported successfully by default"""
    vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.REDHAT_LOG,
                                        expected_vulnerabilities_number=vd.REDHAT_NUM_CUSTOM_VULNERABILITIES)


def test_invalid_redhat_feed(clean_vuln_tables, get_configuration, configure_environment, remove_field_feed):
    """
    Check if vulnerability detector behaves as expected when importing redhat OVAL feed with missing fields
    """
    if remove_field_feed == 'affected_packages':
        pytest.xfail("Add error messages to this case use. Issue: https://github.com/wazuh/wazuh/issues/5151")

    # If the field removed is essential, then look for error messages
    if remove_field_feed in vd.REDHAT_KEY_FIELDS_FEEDS:
        vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor)
    else:
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.REDHAT_LOG,
                                            expected_vulnerabilities_number=vd.REDHAT_NUM_CUSTOM_VULNERABILITIES)

    vd.check_if_modulesd_is_running()
