# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest

from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.vulnerability_detector import make_vuln_callback, callback_detect_os_parameter_warning,\
                                                 VULN_DETECTOR_GLOBAL_TIMEOUT

# Marks
pytestmark = pytest.mark.tier(level=0)

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "data")
configurations_path = os.path.join(test_data_path, "wazuh_providers_os.yaml")

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

params = [
    {'PROVIDER': 'canonical', 'OS': 'trusty'},
    {'PROVIDER': 'canonical', 'OS': 'xenial'},
    {'PROVIDER': 'canonical', 'OS': 'bionic'},
    {'PROVIDER': 'debian', 'OS': 'wheezy'},
    {'PROVIDER': 'debian', 'OS': 'stretch'},
    {'PROVIDER': 'debian', 'OS': 'jessie'},
    {'PROVIDER': 'debian', 'OS': 'buster'},
    {'PROVIDER': 'redhat', 'OS': ''},
    {'PROVIDER': 'nvd', 'OS': ''},
]

metadata = [
    {'provider_name': 'Ubuntu Trusty'},
    {'provider_name': 'Ubuntu Xenial'},
    {'provider_name': 'Ubuntu Bionic'},
    {'provider_name': 'Debian Wheezy'},
    {'provider_name': 'Debian Stretch'},
    {'provider_name': 'Debian Jessie'},
    {'provider_name': 'Debian Buster'},
    {'provider_name': 'Red Hat Enterprise Linux', 'os_warning': 1},
    {'provider_name': 'National Vulnerability Database', 'os_warning': 1},
    ]

ids = [f"{item['PROVIDER']}-{item['OS']}" for item in params]

# configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=params, metadata=metadata)


# fixtures
@pytest.fixture(scope="module", params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


def test_providers(get_configuration, configure_environment, restart_modulesd):
    """
    Check if modulesd downloads the feeds for each os
    """
    provider_name = get_configuration['metadata']['provider_name']
    if 'os_warning' in get_configuration['metadata']:
        wazuh_log_monitor.start(
            timeout=VULN_DETECTOR_GLOBAL_TIMEOUT,
            callback=callback_detect_os_parameter_warning,
            error_message="Could not find: warning 'os' option can only be used in a single-provider",
        )
    wazuh_log_monitor.start(
        timeout=VULN_DETECTOR_GLOBAL_TIMEOUT,
        callback=make_vuln_callback(f"Starting '{provider_name}' database update"),
        error_message=f"Could not find {provider_name} update starting log",
    )
