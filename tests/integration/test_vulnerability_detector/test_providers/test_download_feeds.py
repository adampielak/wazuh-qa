# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest
import json

from wazuh_testing import global_parameters
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.vulnerability_detector import make_vuln_callback

# Marks
pytestmark = pytest.mark.tier(level=1)

# Variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_download_providers_feeds.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Providers data
provider_info = {
    'redhat': {
        'os': [],
        'update_from_year': 2002,
        'system_log': 'Red Hat Enterprise Linux',
        'download_timeout': 360
    },
    'canonical': {
        'os': ['trusty', 'xenial', 'bionic'],
        'update_from_year': '',
        'system_log': 'Ubuntu',
        'download_timeout': 360
    },
    'debian': {
        'os': ['wheezy', 'jessie', 'stretch', 'buster'],
        'update_from_year': '',
        'system_log': 'Debian',
        'download_timeout': 360
    },
    'nvd': {
        'os': [],
        'update_from_year': 2002,
        'system_log': 'National Vulnerability Database',
        'download_timeout': 1200
    }
}


# Set configuration
parameters = []
metadata = []
ids = []

for provider, values in provider_info.items():

  for os in values['os']:
    parameters.append({'PROVIDER_NAME': provider, 'OS': os, 'UPDATE_FROM_YEAR': values['update_from_year']})
    metadata.append({'provider_name': provider, 'os': os, 'update_from_year': values['update_from_year'],
                     'system_log': values['system_log'], 'download_timeout': values['download_timeout']})
    ids.append(f"{provider}_{os}")

  # If empty os list
  if len(values['os']) == 0:
    parameters.append({'PROVIDER_NAME': provider, 'OS': '', 'UPDATE_FROM_YEAR': values['update_from_year']})
    metadata.append({'provider_name': provider, 'os': '', 'update_from_year': values['update_from_year'],
                     'system_log': values['system_log'], 'download_timeout': values['download_timeout']})
    ids.append(f"{provider}")

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


# Tests
def test_download_feeds(get_configuration, configure_environment, restart_modulesd):
    """
    Check if modulesd downloads successfully the feeds from different providers and os.
    """
    check_apply_test({'test_download_feeds'}, get_configuration['tags'])

    provider = get_configuration['metadata']['provider_name']
    os = (get_configuration['metadata']['os']).capitalize()
    system_log = get_configuration['metadata']['system_log']
    download_timeout = get_configuration['metadata']['download_timeout']

    # Check that it starts the feed download
    wazuh_log_monitor.start(timeout=global_parameters.default_timeout,
                            callback=make_vuln_callback(f"Starting {system_log} {os} database update"),
                            error_message=f"Could not find the provider {provider} {os} feed download")

    # Check that the feed is downloaded successfully
    wazuh_log_monitor.start(timeout=download_timeout,
                            callback=make_vuln_callback(f"The update of the {system_log} {os} feed finished \
                                                        successfully"),
                            error_message=f"The provider {provider} {os} download has taken more than \
                                            {download_timeout/60} minutes")