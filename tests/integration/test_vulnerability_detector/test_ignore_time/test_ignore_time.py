# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2
import os
from datetime import datetime, timedelta

import pytest

from wazuh_testing import global_parameters
from wazuh_testing.tools import LOG_FILE_PATH, PREFIX
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.time import TimeMachine, time_to_timedelta

# Marks
pytestmark = pytest.mark.tier(level=0)

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')

configurations_path = os.path.join(test_data_path, 'wazuh_conf.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

p = [{'IGNORE_TIME': '10s'}, {'IGNORE_TIME': '2m'}]
m = [{'ignore_time': '10s'}, {'ignore_time': '2m'}]

configurations = load_wazuh_configurations(configurations_path, __name__, params=p, metadata=m)


# fixtures
@pytest.fixture(scope='module', params=configurations)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


# tests
@pytest.mark.parametrize('tags_to_apply', [
    {'ignore_time'}
])
def test_ignore_time(tags_to_apply,
                  get_configuration, configure_environment, restart_modulesd):
    """Check if different ignore_time intervals works as expected.

    It will only alert each interval defined.
    """
    check_apply_test(tags_to_apply, get_configuration['tags'])
    ignore_time = time_to_timedelta(get_configuration['metadata']['ignore_time'])
    #wazuh_log_monitor.start(timeout=global_parameters.default_timeout, #callback=callback_detect_ignore,
    #                        error_message='Did not receive expected '
    #                                      '"Initializing FIM Integrity Synchronization check" event')




    print('Hello Im here!')


